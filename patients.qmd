---
title: "patients"
format: html
---

::: panel-tabset

```{r}
#| label: setup

library(corrplot)
library(baseph)
library(ggsci)
library(readODS)
library(janitor)
library(visdat)
library(GGally)
library(plotly)
library(epiDisplay)
library(emmeans)
library(tidyverse)
library(kableExtra)
library(gtsummary)
library(forestmodel)
library(fmsb)
library(labelled)
#
load("datas/medgachis.RData")

classeur <- "medgachis.ods"
expx <- FALSE
if (expx) {
  file.create(classeur)
  file.remove(classeur)
  write_ods(iris, classeur)
}

# sessionInfo()
theme_gtsummary_language(language = "fr", decimal.mark = ",")
theme_gtsummary_journal(journal = "jama")
options(OutDec = ",")
ptest <- list(all_continuous() ~ "t.test", all_categorical() ~ "chisq.test")
ptest2 <- list(all_continuous() ~ "paired.t.test", all_categorical() ~ "chisq.test")
stt <- list(
  all_continuous() ~ "{mean} ({sd})",
  all_categorical() ~ "{n}/{N} ({p}%)"
)
```


# Qualité des données

## Corrélations anormales

```{r}
#| label: cor-prep

corxp <- function(prof, titx) {
  tit <- paste0("Corrélations ", titx)
  prof |>
    remove_constant() |>
    mutate_if(is.factor, as.numeric) |>
    dplyr::select(!formule_sys) |>
    ggcorr(drop = TRUE, hjust = 0.9) +
    labs(title = tit,
         y = "n",
         caption = "Corrélations. Validation interne du questionnaire.") +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 14, face = "bold"),
      plot.subtitle = element_text(size = 12),
      axis.title.x = element_blank(),
      legend.title = element_blank(),
      axis.title.y = element_blank(),
      ,
      axis.text.x = element_text(size = 12),
      axis.text.y = element_text(size = 12),
      legend.position = "right"
    )
}
```

```{r}
#| label: fig-corregul
#| fig-cap: Corrélations internes
 gg <-  patients |>
corxp("Patients")
ggplotly(gg)
```

Il n'y a pas de corrélation *anormale* pouvant gêner l'analyse.

## Données manquantes

```{r}
#| label: fig-manq-apt
#| fig-cap: Données manquantes (questionnaire patient)

patients |>
  dplyr::select(-c(formule_sys)) |>
  vis_dat(palette = "qual")
```

Les données manquantes visibles sur le graphique correspondent souvent à des données inexistantes (par ex. le type d'ALR pour un patient sous AG)

# Description


```{r}
#| label: tbl-desc
#| tbl-cap: Description des patients

patients |>
dplyr::select(-formule_sys) |>
  tbl_summary(missing = "no",
              type = all_continuous() ~ "continuous2",
               statistic = all_continuous() ~ c(
      "{mean} ± {sd}",
      "{min}, {max}"),
              value = list(geste_en_urgence = "Oui",
                                            alr_ou_al = "Oui",
                                            ag_ou_sedation = "Oui",
                                            oxygenation_ventilation = "Oui",
                                            extubation_salle_op = "Oui")) |> 
               

  add_n() |> 
  bold_labels() |>
  modify_header(label ~ " ") |> 
  as_kable_extra() |> 
   kable_material(c("striped", "hover")) |> 
   scroll_box(width = "100%", height = "650px")
```

```{r}
#| label: fig-pyr
#| fig-cap: Pyramide des âges

pyramid(patients$age, patients$sexe, col.gender = c("pink", "lightblue"), main = "Pyramide des âges", binwidth = 10)

```

```{r}
#| label: fig-type
#| fig-cap: Type de chirurgie
#| fig-asp: 1

gg <- patients |> 
ggplot(aes(x = fct_infreq(type_chirurgie), fill = type_chirurgie)) +
  geom_bar() +
  theme(legend.position = "none") +
  labs(title = "Type de chirurgie",
       y = "n",
       x = "") +
    theme_light() +
    theme(
      plot.title = element_text(size = 18, face = "bold"),
      plot.subtitle = element_text(size = 12),
      axis.title.x = element_blank(),
      axis.title.y = element_text(size = 12),
      axis.text.x = element_text(size = 12, angle = 40, hjust = 1),
      axis.text.y = element_text(size = 12),
      legend.position = "none"
    )
ggplotly(gg)
```

:::
